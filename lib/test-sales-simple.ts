/**
 * Prueba Simple del Sistema de Gesti√≥n de Ventas
 * 
 * Este archivo ejecuta pruebas b√°sicas con salida visible para verificar
 * que el sistema de gesti√≥n de ventas funciona correctamente.
 */

import { 
  processCartSale, 
  validateCartItemsUtility,
  createCustomSalesConfig,
  processCartSaleWithValidation 
} from './reusable-sales-manager';
import type { CartItem } from './reusable-sales-manager';

// Funci√≥n para mostrar resultados de prueba
function mostrarResultado(nombre: string, resultado: any, exito: boolean = true) {
  console.log(`\n=== ${nombre} ===`);
  console.log(`Estado: ${exito ? '‚úÖ √âXITO' : '‚ùå ERROR'}`);
  console.log('Resultado:', JSON.stringify(resultado, null, 2));
  console.log('=' .repeat(50));
}

// Funci√≥n principal de pruebas
async function ejecutarPruebasSimples() {
  console.log('üöÄ Iniciando Pruebas del Sistema de Gesti√≥n de Ventas\n');

  try {
    // Prueba 1: Validaci√≥n de carrito vac√≠o
    console.log('üìã Prueba 1: Validaci√≥n de carrito vac√≠o');
    const carritoVacio: CartItem[] = [];
    const validacionVacia = await validateCartItemsUtility(carritoVacio);
    mostrarResultado('Validaci√≥n Carrito Vac√≠o', validacionVacia, !validacionVacia.isValid);

    // Prueba 2: Validaci√≥n de carrito v√°lido
    console.log('üìã Prueba 2: Validaci√≥n de carrito v√°lido');
    const carritoValido: CartItem[] = [
      {
        productId: '1',
        quantity: 2,
        saleFormat: 'unitario'
      },
      {
        productId: '2', 
        quantity: 1,
        saleFormat: 'display'
      }
    ];
    const validacionValida = await validateCartItemsUtility(carritoValido);
    mostrarResultado('Validaci√≥n Carrito V√°lido', validacionValida, validacionValida.isValid);

    // Prueba 3: Validaci√≥n de carrito inv√°lido
    console.log('üìã Prueba 3: Validaci√≥n de carrito inv√°lido');
    const carritoInvalido: CartItem[] = [
      {
        productId: '',
        quantity: -1,
        saleFormat: 'unitario'
      }
    ];
    const validacionInvalida = await validateCartItemsUtility(carritoInvalido);
    mostrarResultado('Validaci√≥n Carrito Inv√°lido', validacionInvalida, !validacionInvalida.isValid);

    // Prueba 4: Configuraci√≥n personalizada
    console.log('üìã Prueba 4: Configuraci√≥n personalizada');
    const configPersonalizada = createCustomSalesConfig({
      autoGenerateTicket: true,
      ticketBaseUrl: 'https://test.com/ticket',
      dbConfig: {
        host: 'localhost',
        port: 5432,
        database: 'minimarket_test',
        user: 'test_user',
        password: 'test_pass'
      }
    });
    mostrarResultado('Configuraci√≥n Personalizada', configPersonalizada);

    // Prueba 5: Procesamiento de venta (simulado)
    console.log('üìã Prueba 5: Procesamiento de venta simulado');
    try {
      const resultadoVenta = await processCartSale(
        carritoValido,
        'test-user-123',
        'test@example.com'
      );
      mostrarResultado('Procesamiento de Venta', resultadoVenta, resultadoVenta.success);
    } catch (error) {
      mostrarResultado('Procesamiento de Venta (Error Esperado)', {
        error: error instanceof Error ? error.message : 'Error desconocido',
        nota: 'Este error es esperado si no hay conexi√≥n a la base de datos'
      }, false);
    }

    // Prueba 6: Venta con validaci√≥n autom√°tica (simulado)
    console.log('üìã Prueba 6: Venta con validaci√≥n autom√°tica');
    try {
      const resultadoValidacion = await processCartSaleWithValidation(
        carritoValido,
        'test-user-456',
        'test2@example.com'
      );
      mostrarResultado('Venta con Validaci√≥n', resultadoValidacion, resultadoValidacion.success);
    } catch (error) {
      mostrarResultado('Venta con Validaci√≥n (Error Esperado)', {
        error: error instanceof Error ? error.message : 'Error desconocido',
        nota: 'Este error es esperado si no hay conexi√≥n a la base de datos'
      }, false);
    }

  } catch (error) {
    console.error('‚ùå Error general en las pruebas:', error);
  }

  console.log('\nüèÅ Pruebas completadas');
}

// Ejecutar las pruebas
ejecutarPruebasSimples().catch(console.error);